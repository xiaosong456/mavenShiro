<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.2.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.2.xsd">
    <!--
    在xml配置了这个标签后，spring可以自动去扫描base-pack下面或者子包下面的java文件，如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean
    use-default-filters 默认为true，即默认全部扫描。
    此处不扫描Controller注解，放到springMVC中扫描
    -->
    <context:component-scan base-package="com.lxsoft"  use-default-filters="false">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 使用注解注入properties中的值 是下面的dataSource可以动态地从配置文件中获取值 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
    </bean>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!--初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
        <property name="initialSize" value="1" />
        <!--最小连接池数量-->
        <property name="minIdle" value="1" />
        <!--最大连接池数量-->
        <property name="maxActive" value="20" />
        <!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
        <property name="maxWait" value="60000" />
        <!--有两个含义：
            1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明-->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
        <property name="validationQuery" value="SELECT 'x'" />
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="true" />
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
        <property name="testOnBorrow" value="false" />
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false" />
        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
        <property name="poolPreparedStatements" value="false" />
        <!--并且指定每个连接上PSCache的大小-->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!--	属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall-->
        <property name="filters" value="stat" />
    </bean>

    <!-- mybatis文件配置，mapperLocations 扫描所有mapper xml文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath*:com/lxsoft/*.xml" />

    <!-- spring与mybatis整合配置，扫描所有mapper接口，在单数据源的情况下可以不写sqlSessionFactoryBeanName -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.lxsoft.*"
          p:sqlSessionFactoryBeanName="sqlSessionFactory" />

    <!-- 配置事务管理组件 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource" />

    <!-- 开启事务注解标记@Transactional，当调用带@Transactional标记的方法时，将txManager的事务管理功能切入进去 -->
    <tx:annotation-driven />
    <context:annotation-config/>
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>




    <!--            以上是Spring的配置                       以下是Shiro的配置信息            -->



    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--配置缓存管理器-->
        <property name="cacheManager" ref="cacheManager" />
        <!--设置安全管理器的安全数据源为自定义的 Realm-->
        <property name="authenticator" ref="authenticator" />
        <!--配置多个Realm规则-->
        <property name="realms">
            <list>
                <ref bean="myRealm" />
               <!-- <ref bean="shiroRealm" />-->
            </list>
        </property>
        <property name="rememberMeManager" ref="remeberMeManager" />
    </bean>

    <!--记住我 管理器-->
    <bean id="remeberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
        <property name="cookie" ref="rememberMeCookie" />
    </bean>

    <!--设置记住我时长-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="20"/><!-- 30天  2592000-->
    </bean>

    <!-- 配置缓存管理器
        Shiro的用户认证是没有提供缓存机制的，因为每次登陆都会查询数据库对比用户名和密码
        但是Shiro的授权将会是大量的数据，shiro的授权缓冲是默认开启的，授权时只有用户第一次访问系统的时候会走realm查数据库，之后就会走缓存
        注意：用户正常退出或者非正常退出时都会清空缓存。
     -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>

    <!--配置认证策略-->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!--配置认证策略 所有Realm都通过时才算成功-->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
        </property>
    </bean>

    <!-- 设置安全管理器的安全数据源为自定义的 Realm -->
    <bean id="myRealm" class="com.lxsoft.shiro.realms.MyRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>      <!--加密算法-->
                <property name="hashIterations" value="1024"></property>         <!--加密次数-->
            </bean>
        </property>
    </bean>

    <bean id="shiroRealm" class="com.lxsoft.shiro.realms.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>      <!--加密算法-->
                <property name="hashIterations" value="1024"></property>         <!--加密次数-->
            </bean>
        </property>
    </bean>

    <!--配置LifecycleBeanPostProcessor 可以自动的调用配置在Spring IOC容器中 Shiro bean 的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--启用IOC容器中使用Shiro 的注解，但必须在配置了lifecycleBeanPostProcessor 之后才可以使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--Shiro的核心安全接口，这个属性是必须的-->
        <property name="securityManager" ref="securityManager" />
        <!--身份认证失败，则跳转到登录页面的配置-->
        <property name="loginUrl" value="/login.jsp" />
        <!--身份认证成功，则跳转到系统内页面-->
        <property name="successUrl" value="/list.jsp" />
        <!--权限认证失败，则跳转到指定页面-->
        <property name="unauthorizedUrl" value="/unauthorized.jsp" />

        <!--4.配置ShiroFilter
             id必须和web.xml中的DelegatingFilterProxy的filter-name一致,
            否则会抛NoSuchBeanDefinitionException异常
         -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap" />
        <!--Shiro连接约束配置，即过滤链的定义
        anon    可以被匿名访问
        authc   必须认证即登录后才可以访问的页面
        URL权限采取第一次匹配原则，即从头开始使用第一个匹配的url模式对应的拦截器链
        -->
        <!-- <property name="filterChainDefinitions">
             <value>
                 /login.jsp=anon
                 /shiro/login=anon
                 /shiro/logout=logout

                /user.jsp=roles[user]
                 /admin.jsp=roles[admin]

                 /**=authc
             </value>
         </property>-->
    </bean>

    <!--配置一个bean，该bean实际上是一个Map，通过实例工厂方法的方式-->
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap" />
    <bean id="filterChainDefinitionMapBuilder" class="com.lxsoft.shiro.factory.FilterChainDefinitionMapBuilder"></bean>


    <!--不知道为什么上面的抛出未授权异常时有时跳转页面失败，因此在此处添加异常捕获的bean，用于处理未授权、登录失败、等异常-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authc.UnknownAccountException">
                    /login
                </prop>
                <prop key="org.apache.shiro.authz.UnauthorizedException">  <!--表示捕获的异常-->
                    /unauthorized <!--捕获该异常时跳转的路径-->
                </prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">  <!--表示捕获的异常-->
                    /unauthenticated  <!--捕获该异常时跳转的路径-->
                </prop>
            </props>
        </property>
    </bean>



</beans>